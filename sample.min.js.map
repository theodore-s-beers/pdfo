{
  "version": 3,
  "sources": ["pdfo.ts", "sample.ts"],
  "sourcesContent": ["// This library was forked from Philip Hutchison's PDFObject. His license is\n// below. A substantial, and growing, number of changes has been made---not\n// least the conversion to TypeScript.\n\n/*!\n *  PDFObject v2.2.7\n *  https://github.com/pipwerks/PDFObject\n *  @license\n *  Copyright (c) 2008\u20132021 Philip Hutchison\n *  MIT-style license: https://pipwerks.mit-license.org/\n */\n\n//\n// TYPES\n//\n\ninterface EmbedOptions {\n  id?: string\n  page?: number | string\n  pdfOpenParams?: Record<string, unknown>\n  fallbackLink?: string | boolean\n  width?: string\n  height?: string\n  title?: string\n  assumptionMode?: boolean\n  supportRedirect?: boolean\n  omitInlineStyles?: boolean\n  forceIframe?: boolean\n}\n\n//\n// GLOBAL VARIABLES\n//\n\n// Shorthand variables for Navigator object and UA string\nconst nav = window.navigator\nconst ua = window.navigator.userAgent\n\n// A recent, and still Chromium-only, way of checking for a mobile browser\nconst newMobileTest = nav.userAgentData?.mobile\n\n// Safari on iPadOS doesn't report as \"mobile\" when requesting a desktop site,\n// yet still fails to embed PDFs.\nconst isSafariIOSDesktopMode =\n  nav.platform !== undefined &&\n  nav.platform === 'MacIntel' &&\n  nav.maxTouchPoints !== undefined &&\n  nav.maxTouchPoints > 1\n\n// Our best guess as to whether we're dealing with a mobile device\nconst isMobileDevice =\n  newMobileTest === true ||\n  /Mobi|Tablet|Android|iPad|iPhone/.test(ua) ||\n  isSafariIOSDesktopMode\n\n// Safari desktop requires special handling (i.e., always use iframe)\nconst isSafariDesktop =\n  !isMobileDevice &&\n  nav.vendor !== undefined &&\n  /Apple/.test(nav.vendor) &&\n  /Safari/.test(ua)\n\n//\n// FUNCTIONS\n//\n\nexport function supportsPDFs (): boolean {\n  // New property available in recent versions of Chrome and Firefox\n  const pdfViewerEnabled = nav.pdfViewerEnabled\n\n  // If this comes back true or false, best to just go with it?\n  if (typeof pdfViewerEnabled === 'boolean') {\n    return pdfViewerEnabled\n  }\n\n  /*\n    There is a coincidental correlation between implementation of promises and \n    native PDF support in desktop browsers.\n    We assume that if the browser supports promises it supports embedded PDFs.\n    Is this fragile? Sort of. But browser vendors removed mimetype detection, \n    so we're left to improvise\n  */\n  const isModernBrowser = typeof Promise !== 'undefined'\n\n  // We're moving into the age of MIME-less browsers.\n  // They mostly all support PDF rendering without plugins.\n  const likelySupportsPDFs = !isMobileDevice && isModernBrowser\n\n  return likelySupportsPDFs\n}\n\nexport function embed (\n  url: string,\n  targetSelector: HTMLElement | string,\n  options?: EmbedOptions\n): void {\n  // Ensure options not undefined -- enables easier error checking below\n  const opt = options || {}\n\n  // Get passed options, or set reasonable defaults\n  const id = typeof opt.id === 'string' ? opt.id : ''\n  const page = opt.page || null\n  const pdfOpenParams = opt.pdfOpenParams || {}\n  const fallbackLink =\n    typeof opt.fallbackLink === 'string' ||\n    typeof opt.fallbackLink === 'boolean'\n      ? opt.fallbackLink\n      : true\n  const width = opt.width || '100%'\n  const height = opt.height || '100%'\n  const title = opt.title || 'Embedded PDF'\n  const assumptionMode =\n    typeof opt.assumptionMode === 'boolean' ? opt.assumptionMode : true\n  const supportRedirect =\n    typeof opt.supportRedirect === 'boolean' ? opt.supportRedirect : false\n  const omitInlineStyles =\n    typeof opt.omitInlineStyles === 'boolean' ? opt.omitInlineStyles : false\n  const forceIframe =\n    typeof opt.forceIframe === 'boolean' ? opt.forceIframe : false\n\n  const targetNode = getTargetElement(targetSelector)\n\n  const fallbackHTMLDefault =\n    \"<p>This browser does not support inline PDFs. Please download the PDF to view it: <a href='[url]'>Download PDF</a></p>\"\n\n  let fallbackHTML = ''\n  let pdfOpenFragment = ''\n\n  // If target element is specified but not valid, exit without doing anything\n  // How would targetNode be falsy? I don't yet understand this\n  if (!targetNode) {\n    return embedError('Target element cannot be determined')\n  }\n\n  // page option overrides pdfOpenParams, if found\n  if (page) {\n    pdfOpenParams.page = page\n  }\n\n  // Stringify optional Adobe params for opening PDF (as fragment identifier)\n  pdfOpenFragment = buildURLFragmentString(pdfOpenParams)\n\n  // --== Attempt embed ==--\n\n  // Embed PDF if traditional support is provided, or if this developer is\n  // willing to roll with assumption that modern desktop (not mobile) browsers\n  // natively support PDFs\n  if (supportsPDFs() || (assumptionMode && !isMobileDevice)) {\n    // Should we use <embed> or <iframe>? In most cases <embed>.\n    // Allow developer to force <iframe>, if desired\n    // There is an edge case where Safari does not respect 302 redirect requests\n    // for PDF files when using <embed> element. Redirect appears to work fine\n    // when using <iframe> instead of <embed> (Addresses issue #210). Forcing\n    // Safari desktop to use iframe due to freezing bug in macOS 11 (Big Sur)\n    const embedType =\n      forceIframe || supportRedirect || isSafariDesktop ? 'iframe' : 'embed'\n\n    return generatePDFoMarkup(\n      embedType,\n      targetNode,\n      targetSelector,\n      url,\n      pdfOpenFragment,\n      width,\n      height,\n      id,\n      title,\n      omitInlineStyles\n    )\n  }\n\n  // --== PDF embed not supported! Use fallback ==--\n\n  // Display the fallback link if available\n  if (fallbackLink) {\n    fallbackHTML =\n      typeof fallbackLink === 'string' ? fallbackLink : fallbackHTMLDefault\n    targetNode.innerHTML = fallbackHTML.replace(/\\[url\\]/g, url)\n  }\n\n  return embedError('This browser does not support embedded PDFs')\n}\n\nfunction generatePDFoMarkup (\n  embedType: string,\n  targetNode: HTMLElement,\n  targetSelector: HTMLElement | string,\n  url: string,\n  pdfOpenFragment: string,\n  width: string,\n  height: string,\n  id: string,\n  title: string,\n  omitInlineStyles: boolean\n): void {\n  // Ensure target element is empty first\n  emptyNodeContents(targetNode)\n\n  let embed: HTMLEmbedElement | HTMLIFrameElement\n\n  if (embedType === 'iframe') {\n    embed = document.createElement(embedType) as HTMLIFrameElement\n    embed.allow = 'fullscreen'\n  } else {\n    embed = document.createElement(embedType) as HTMLEmbedElement\n    embed.type = 'application/pdf'\n  }\n\n  embed.src = url + pdfOpenFragment\n  embed.className = 'pdfo'\n  embed.title = title\n  embed.id = id\n\n  if (!omitInlineStyles) {\n    let style = embedType === 'embed' ? 'overflow: auto;' : 'border: none;'\n\n    if (targetSelector !== document.body) {\n      style += `width: ${width}; height: ${height};`\n    } else {\n      style +=\n        'position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;'\n    }\n\n    embed.style.cssText = style\n  }\n\n  targetNode.classList.add('pdfo-container')\n\n  // This is where the magic finally happens\n  targetNode.appendChild(embed)\n}\n\nfunction getTargetElement (targetSelector: HTMLElement | string): HTMLElement {\n  // Default to body for full-browser PDF\n  let targetNode = document.body\n\n  // If a targetSelector is specified, check to see whether it's passing a\n  // selector or an HTML element\n\n  if (typeof targetSelector === 'string') {\n    // Is CSS selector\n    targetNode = document.querySelector(targetSelector) as HTMLElement\n  } else if (\n    targetSelector.nodeType !== undefined &&\n    targetSelector.nodeType === 1\n  ) {\n    // Is HTML element\n    targetNode = targetSelector\n  }\n\n  return targetNode\n}\n\nfunction embedError (msg: string): void {\n  console.log(`[pdfo] ${msg}`)\n}\n\nfunction emptyNodeContents (node: HTMLElement): void {\n  while (node.firstChild) {\n    node.removeChild(node.firstChild)\n  }\n}\n\nfunction buildURLFragmentString (pdfParams: Record<string, unknown>): string {\n  let string = ''\n\n  if (pdfParams) {\n    for (const prop in pdfParams) {\n      if (Object.prototype.hasOwnProperty.call(pdfParams, prop)) {\n        string += `${encodeURIComponent(prop)}=${encodeURIComponent(\n          String(pdfParams[prop])\n        )}&`\n      }\n    }\n\n    // The string will be empty if no PDF Params found\n    if (string) {\n      string = `#${string}`\n\n      // Remove last ampersand\n      string = string.slice(0, string.length - 1)\n    }\n  }\n\n  return string\n}\n", "import * as pdfo from './pdfo'\n\nconst pdfOptions = {\n  forceIframe: true,\n  pdfOpenParams: {\n    view: 'Fit'\n  }\n}\n\npdfo.embed('dummy.pdf', '#pdf-box', pdfOptions)\n"],
  "mappings": "mBAmCA,IAAMA,EAAM,OAAO,UACbC,EAAK,OAAO,UAAU,UApC5BC,EAuCMC,GAAgBD,EAAAF,EAAI,gBAAJ,YAAAE,EAAmB,OAInCE,EACJJ,EAAI,WAAa,QACjBA,EAAI,WAAa,YACjBA,EAAI,iBAAmB,QACvBA,EAAI,eAAiB,EAGjBK,EACJF,IAAkB,IAClB,kCAAkC,KAAKF,CAAE,GACzCG,EAGIE,EACJ,CAACD,GACDL,EAAI,SAAW,QACf,QAAQ,KAAKA,EAAI,MAAM,GACvB,SAAS,KAAKC,CAAE,EAMX,SAASM,GAAyB,CAEvC,IAAMC,EAAmBR,EAAI,iBAG7B,OAAI,OAAOQ,GAAqB,UACvBA,EAckB,CAACH,GAJJ,OAAO,SAAY,WAO7C,CAEO,SAASI,EACdC,EACAC,EACAC,EACM,CAEN,IAAMC,EAAMD,GAAW,CAAC,EAGlBE,EAAK,OAAOD,EAAI,IAAO,SAAWA,EAAI,GAAK,GAC3CE,EAAOF,EAAI,MAAQ,KACnBG,EAAgBH,EAAI,eAAiB,CAAC,EACtCI,EACJ,OAAOJ,EAAI,cAAiB,UAC5B,OAAOA,EAAI,cAAiB,UACxBA,EAAI,aACJ,GACAK,EAAQL,EAAI,OAAS,OACrBM,EAASN,EAAI,QAAU,OACvBO,EAAQP,EAAI,OAAS,eACrBQ,EACJ,OAAOR,EAAI,gBAAmB,UAAYA,EAAI,eAAiB,GAC3DS,EACJ,OAAOT,EAAI,iBAAoB,UAAYA,EAAI,gBAAkB,GAC7DU,EACJ,OAAOV,EAAI,kBAAqB,UAAYA,EAAI,iBAAmB,GAC/DW,EACJ,OAAOX,EAAI,aAAgB,UAAYA,EAAI,YAAc,GAErDY,EAAaC,EAAiBf,CAAc,EAE5CgB,EACJ,yHAEEC,EAAe,GACfC,EAAkB,GAItB,OAAKJ,GAKDV,IACFC,EAAc,KAAOD,GAIvBc,EAAkBC,EAAuBd,CAAa,EAOlDT,EAAa,GAAMc,GAAkB,CAAChB,EAUjC0B,EAFLP,GAAeF,GAAmBhB,EAAkB,SAAW,QAI/DmB,EACAd,EACAD,EACAmB,EACAX,EACAC,EACAL,EACAM,EACAG,CACF,GAMEN,IACFW,EACE,OAAOX,GAAiB,SAAWA,EAAeU,EACpDF,EAAW,UAAYG,EAAa,QAAQ,WAAYlB,CAAG,GAGtDsB,EAAW,6CAA6C,IAjDtDA,EAAW,qCAAqC,CAkD3D,CAEA,SAASD,EACPE,EACAR,EACAd,EACAD,EACAmB,EACAX,EACAC,EACAL,EACAM,EACAG,EACM,CAENW,EAAkBT,CAAU,EAE5B,IAAIhB,EAeJ,GAbIwB,IAAc,UAChBxB,EAAQ,SAAS,cAAcwB,CAAS,EACxCxB,EAAM,MAAQ,eAEdA,EAAQ,SAAS,cAAcwB,CAAS,EACxCxB,EAAM,KAAO,mBAGfA,EAAM,IAAMC,EAAMmB,EAClBpB,EAAM,UAAY,OAClBA,EAAM,MAAQW,EACdX,EAAM,GAAKK,EAEP,CAACS,EAAkB,CACrB,IAAIY,EAAQF,IAAc,QAAU,kBAAoB,gBAEpDtB,IAAmB,SAAS,KAC9BwB,GAAS,UAAUjB,cAAkBC,KAErCgB,GACE,uFAGJ1B,EAAM,MAAM,QAAU0B,CACxB,CAEAV,EAAW,UAAU,IAAI,gBAAgB,EAGzCA,EAAW,YAAYhB,CAAK,CAC9B,CAEA,SAASiB,EAAkBf,EAAmD,CAE5E,IAAIc,EAAa,SAAS,KAK1B,OAAI,OAAOd,GAAmB,SAE5Bc,EAAa,SAAS,cAAcd,CAAc,EAElDA,EAAe,WAAa,QAC5BA,EAAe,WAAa,IAG5Bc,EAAad,GAGRc,CACT,CAEA,SAASO,EAAYI,EAAmB,CACtC,QAAQ,IAAI,UAAUA,GAAK,CAC7B,CAEA,SAASF,EAAmBG,EAAyB,CACnD,KAAOA,EAAK,YACVA,EAAK,YAAYA,EAAK,UAAU,CAEpC,CAEA,SAASP,EAAwBQ,EAA4C,CAC3E,IAAIC,EAAS,GAEb,GAAID,EAAW,CACb,QAAWE,KAAQF,EACb,OAAO,UAAU,eAAe,KAAKA,EAAWE,CAAI,IACtDD,GAAU,GAAG,mBAAmBC,CAAI,KAAK,mBACvC,OAAOF,EAAUE,EAAK,CACxB,MAKAD,IACFA,EAAS,IAAIA,IAGbA,EAASA,EAAO,MAAM,EAAGA,EAAO,OAAS,CAAC,EAE9C,CAEA,OAAOA,CACT,CC3RA,IAAME,EAAa,CACjB,YAAa,GACb,cAAe,CACb,KAAM,KACR,CACF,EAEKC,EAAM,YAAa,WAAYD,CAAU",
  "names": ["nav", "ua", "_a", "newMobileTest", "isSafariIOSDesktopMode", "isMobileDevice", "isSafariDesktop", "supportsPDFs", "pdfViewerEnabled", "embed", "url", "targetSelector", "options", "opt", "id", "page", "pdfOpenParams", "fallbackLink", "width", "height", "title", "assumptionMode", "supportRedirect", "omitInlineStyles", "forceIframe", "targetNode", "getTargetElement", "fallbackHTMLDefault", "fallbackHTML", "pdfOpenFragment", "buildURLFragmentString", "generatePDFoMarkup", "embedError", "embedType", "emptyNodeContents", "style", "msg", "node", "pdfParams", "string", "prop", "pdfOptions", "embed"]
}
